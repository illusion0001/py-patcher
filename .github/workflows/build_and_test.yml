name: Build and test PyPatcher

on:
  push:
    paths:
      - '.github/workflows/*'
      - 'src/**'
      - 'data/**'
  pull_request:
    paths:
      - '.github/workflows/*'
      - 'src/**'
      - 'data/**'
  workflow_dispatch:

jobs:
    build_and_test:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ ubuntu-latest, windows-latest ]

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Setup Python
              uses: actions/setup-python@v2
              with:
                python-version: '3.10'

            - name: Install dependencies
              run:  pip install -r requirements.txt

            - name: Build application (win32)
              if: matrix.os == 'windows-latest'
              env:
                my_key: ${{ secrets.tests }}
              run: |
                echo "SHORT_SHA=$($env:GITHUB_SHA.SubString(0,7))" >> $env:GITHUB_ENV
                pip install tinyaes
                pip install https://github.com/pyinstaller/pyinstaller/archive/refs/heads/develop.zip
                pyinstaller --onefile --key "$env:my_key" -n py-patch --distpath . launcher.py

            - name: Build application (linux)
              if: matrix.os == 'ubuntu-latest'
              env:
                my_key: ${{ secrets.tests }}
              run: |
                echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV
                pip install tinyaes
                pip install https://github.com/pyinstaller/pyinstaller/archive/refs/heads/develop.zip
                pyinstaller --onefile --key "$my_key" -n py-patch --distpath . launcher.py

            - name: Copy files to root for artifacts
              run: |
                cp data/*.yml .

            - name: Run tests (.py)
              run: |
                echo ============================================
                echo Running Tests
                python launcher.py -f data/testdata/fakeorbis.elf -c orbistest.yml -v -od
                python launcher.py -f data/testdata/fakeorbis.elf -c orbistest.yml -v
                python launcher.py -f data/testdata/fakecell.elf -c celltest.yml -v -od
                python launcher.py -f data/testdata/fakecell.elf -c celltest.yml -v
                echo ============================================

            - name: Run tests (.exe)
              if: matrix.os == 'windows-latest'
              run: |
                echo ============================================
                echo Running Tests
                .\py-patch.exe -f data/testdata/fakeorbis.elf -c orbistest.yml -v -od
                .\py-patch.exe -f data/testdata/fakeorbis.elf -c orbistest.yml -v
                .\py-patch.exe -f data/testdata/fakecell.elf -c celltest.yml -v -od
                .\py-patch.exe -f data/testdata/fakecell.elf -c celltest.yml -v
                echo ============================================

            - name: Run tests (.elf)
              if: matrix.os == 'ubuntu-latest'
              run: |
                echo ============================================
                echo Running Tests
                mv py-patch py-patch.elf
                ./py-patch.elf -f data/testdata/fakeorbis.elf -c orbistest.yml -v -od
                ./py-patch.elf -f data/testdata/fakeorbis.elf -c orbistest.yml -v
                ./py-patch.elf -f data/testdata/fakecell.elf -c celltest.yml -v -od
                ./py-patch.elf -f data/testdata/fakecell.elf -c celltest.yml -v
                echo ============================================

            - name: Push app artifact - yml (main)
              if: |
                matrix.os == 'windows-latest' &&
                github.ref == 'refs/heads/main'
              uses: actions/upload-artifact@v3
              with:
                name: py-patch
                path: |
                  README.md
                  example.yml
                  py-patch.elf
                  py-patch.exe
                retention-days: 15

            - name: Push app artifact - yml (devleopment)
              if: github.ref == 'refs/heads/dev'
              uses: actions/upload-artifact@v3
              with:
                name: py-patch
                path: |
                  README.md
                  example.yml
                  py-patch.elf
                  py-patch.exe
                retention-days: 2

            - name: Upload linux binaries for release
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              if: |
                github.event_name == 'workflow_dispatch' &&
                matrix.os == 'ubuntu-latest'
              run: |
                zip -r py-patch-linux.zip py-patch.elf example.yml README.md
                gh release create $SHORT_SHA py-patch-linux.zip --target $GITHUB_SHA -t "Release - $SHORT_SHA"

            - name: Upload win32 binaries for release
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              if: |
                github.event_name == 'workflow_dispatch' &&
                matrix.os == 'windows-latest'
              run: |
                ls
                compress-archive py-patch.exe, example.yml, README.md py-patch-windows.zip
                gh release upload $env:SHORT_SHA py-patch-windows.zip
