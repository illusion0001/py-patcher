name: Build

on:
  push:
    paths:
      - '.github/workflows/*'
      - 'src/**'
      - 'data/**'
  pull_request:
    paths:
      - '.github/workflows/*'
      - 'src/**'
      - 'data/**'
  workflow_dispatch:

jobs:
    build:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ ubuntu-latest, windows-latest ]

        steps:
            - name: Checkout
              uses: actions/checkout@v3
              with:
                fetch-depth: 0

            - name: Get short SHA
              shell: bash
              run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

            - name: Set app version
              shell: bash
              run: |
                ver=1.`git rev-list HEAD --count`
                echo program_version=\'$ver\' > src/prog_ver.py
                echo program_version=$ver > prog_ver

            - name: Setup Python
              uses: actions/setup-python@v3
              with:
                python-version: '3.x'

            - name: Install dependencies
              run: |
                python -m pip install -r requirements.txt
                python -m pip install tinyaes git+https://github.com/pyinstaller/pyinstaller.git

            - name: Set key (base)
              if: |
                github.event_name != 'pull_request' &&
                github.repository == 'illusion0001/py-patcher'
              run: echo my_key="${{ secrets.tests }}" >> ${{ github.env }}

            - name: Set key (fork)
              if: |
                github.event_name == 'pull_request' ||
                github.repository != 'illusion0001/py-patcher'
              run: echo my_key="${{ github.run_id }}" >> ${{ github.env }}

            - name: Set artifact condition (if workflow dispatch)
              if: |
                github.event_name == 'workflow_dispatch' ||
                github.ref_name != 'main'
              run: echo artifact_days=1 >> ${{ github.env }}

            - name: Set artifact condition (else)
              if: |
                github.event_name != 'workflow_dispatch' &&
                github.ref_name == 'main'
              run: echo artifact_days=14 >> ${{ github.env }}

            - name: Build application
              run: pyinstaller --onefile --key "${{ env.my_key }}" -n py-patch --distpath . launcher.py

            - name: Prepare tests
              run: |
                cp -r data/* .
                mkdir output-file
                chmod +x *.sh

            # Since the program is now interactive
            # tests don't work anymore.
            # - name: Run tests
            #   shell: bash
            #   run: |
            #      ./testpy.sh
            #      ./testapp.sh

            - name: Push app artifact
              uses: actions/upload-artifact@v3
              with:
                path: |
                  prog_ver
                  README.md
                  LICENSE
                  example.yml
                  py-patch
                  py-patch.exe
                retention-days: ${{ env.artifact_days }}

    push_release:
      if: |
        github.event_name == 'workflow_dispatch' &&
        github.repository == 'illusion0001/py-patcher'
      needs: build

      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            fetch-depth: 0

        - name: Checkout release repo
          uses: actions/checkout@v3
          with:
            repository: illusion0001/py-patcher-bin
            path: release-repo

        - name: Download artifacts
          uses: actions/download-artifact@v3

        - name: Prepare release
          run: |
            cp data/*.sh .
            chmod +x *.sh
            ./cl.sh
            cd release-repo
            echo hash=`git rev-parse HEAD` >> ${{ github.env }}
            cd ..
            cat artifact/prog_ver >> ${{ github.env }}
            cp *.md artifact
            cd artifact
            mkdir bin
            zip bin/py-patch-windows.zip py-patch.exe example.yml README.md LICENSE changelist.md
            tar -czvf bin/py-patch-linux.tar.gz py-patch example.yml README.md LICENSE changelist.md

        - name: Push release
          env:
            GITHUB_TOKEN: ${{ secrets.repo2 }}
          run: gh release create $program_version artifact/bin/* --target $hash -t $program_version -F changelist.md -R illusion0001/py-patcher-bin

