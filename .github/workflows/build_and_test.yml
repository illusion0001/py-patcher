name: Build and test PyPatcher

on:
  push:
    paths:
      - '.github/workflows/*'
      - 'src/**'
      - 'data/**'
  pull_request:
    paths:
      - '.github/workflows/*'
      - 'src/**'
      - 'data/**'
  workflow_dispatch:

jobs:
    build:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ ubuntu-latest, windows-latest ]

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Setup Python
              uses: actions/setup-python@v3
              with:
                python-version: '3.x'

            - name: Install dependencies
              run: |
                python -m pip install -r requirements.txt
                python -m pip install tinyaes git+https://github.com/pyinstaller/pyinstaller.git

            - name: Get short SHA
              shell: bash
              run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

            - name: Set key (base)
              if: |
                github.event_name != 'pull_request' &&
                github.repository == 'illusion0001/py-patcher'
              run: echo my_key="${{ secrets.tests }}" >> ${{ github.env }}

            - name: Set key (fork)
              if: |
                github.event_name == 'pull_request' ||
                github.repository != 'illusion0001/py-patcher'
              run: echo my_key="${{ github.run_id }}" >> ${{ github.env }}

            - name: Set artifact condition (if workflow dispatch)
              if: github.event_name == 'workflow_dispatch'
              run: echo artifact_days=1 >> ${{ github.env }}

            - name: Set artifact condition (else)
              if: github.event_name != 'workflow_dispatch'
              run: echo artifact_days=14 >> ${{ github.env }}

            - name: Build application
              run: pyinstaller --onefile --key "${{ env.my_key }}" -n py-patch --distpath . launcher.py

            - name: Run tests (.py)
              run: |
                cp data/*.yml .
                mkdir output-file
                echo ============================================
                echo Running Tests
                python launcher.py -f data/testdata/fakeorbis.elf -c orbistest.yml -v -od
                python launcher.py -f data/testdata/fakeorbis.elf -c orbistest.yml -v
                python launcher.py -f data/testdata/fakecell.elf -c celltest.yml -v -od
                python launcher.py -f data/testdata/fakecell.elf -c celltest.yml -v -o output-file
                python launcher.py -f data/testdata/fakecell.elf -c celltest.yml -v
                python launcher.py -f data/testdata/fakecell.elf -c celltest.yml
                echo ============================================

            - name: Run tests (built executable)
              run: |
                echo ==========================================================
                echo Running Tests
                ./py-patch -f data/testdata/fakeorbis.elf -c orbistest.yml -v -od
                ./py-patch -f data/testdata/fakeorbis.elf -c orbistest.yml -v
                ./py-patch -f data/testdata/fakecell.elf -c celltest.yml -v -od
                ./py-patch -f data/testdata/fakecell.elf -c celltest.yml -v -o output-file
                ./py-patch -f data/testdata/fakecell.elf -c celltest.yml -v
                ./py-patch -f data/testdata/fakecell.elf -c celltest.yml
                echo ==========================================================

            - name: Push app artifact
              uses: actions/upload-artifact@v3
              with:
                path: |
                  README.md
                  LICENSE
                  example.yml
                  py-patch
                  py-patch.exe
                retention-days: ${{ env.artifact_days }}

    push_release:
      if: github.event_name == 'workflow_dispatch'
      needs: build
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v3
        - name: Download artifacts
          uses: actions/download-artifact@v3
        - name: Create Release
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            cd artifact
            mkdir bin
            zip bin/py-patch.zip py-patch.exe example.yml README.md LICENSE
            tar -czvf bin/py-patch-linux.tar.gz py-patch example.yml README.md LICENSE
            gh release create 1.${{ GITHUB.RUN_NUMBER }} bin/* --target ${{ GITHUB.SHA }} -t 1.${{ GITHUB.RUN_NUMBER }}

